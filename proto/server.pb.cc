// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace serverproto {
PROTOBUF_CONSTEXPR ConnectServer::ConnectServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectServerDefaultTypeInternal() {}
  union {
    ConnectServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectServerDefaultTypeInternal _ConnectServer_default_instance_;
PROTOBUF_CONSTEXPR RConnectServer::RConnectServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.read_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RConnectServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RConnectServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RConnectServerDefaultTypeInternal() {}
  union {
    RConnectServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RConnectServerDefaultTypeInternal _RConnectServer_default_instance_;
PROTOBUF_CONSTEXPR CreateRoom::CreateRoom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id1_)*/0u
  , /*decltype(_impl_.id2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomDefaultTypeInternal() {}
  union {
    CreateRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomDefaultTypeInternal _CreateRoom_default_instance_;
PROTOBUF_CONSTEXPR GameOver::GameOver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id1_)*/0u
  , /*decltype(_impl_.id2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameOverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameOverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameOverDefaultTypeInternal() {}
  union {
    GameOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameOverDefaultTypeInternal _GameOver_default_instance_;
}  // namespace serverproto
static ::_pb::Metadata file_level_metadata_server_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_server_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_server_2eproto = nullptr;

const uint32_t TableStruct_server_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serverproto::ConnectServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serverproto::ConnectServer, _impl_.servername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serverproto::RConnectServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serverproto::RConnectServer, _impl_.read_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serverproto::CreateRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serverproto::CreateRoom, _impl_.id1_),
  PROTOBUF_FIELD_OFFSET(::serverproto::CreateRoom, _impl_.id2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serverproto::GameOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serverproto::GameOver, _impl_.id1_),
  PROTOBUF_FIELD_OFFSET(::serverproto::GameOver, _impl_.id2_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::serverproto::ConnectServer)},
  { 7, -1, -1, sizeof(::serverproto::RConnectServer)},
  { 14, -1, -1, sizeof(::serverproto::CreateRoom)},
  { 22, -1, -1, sizeof(::serverproto::GameOver)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::serverproto::_ConnectServer_default_instance_._instance,
  &::serverproto::_RConnectServer_default_instance_._instance,
  &::serverproto::_CreateRoom_default_instance_._instance,
  &::serverproto::_GameOver_default_instance_._instance,
};

const char descriptor_table_protodef_server_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014server.proto\022\013serverproto\"#\n\rConnectSe"
  "rver\022\022\n\nservername\030\001 \001(\t\"\036\n\016RConnectServ"
  "er\022\014\n\004read\030\001 \001(\010\"&\n\nCreateRoom\022\013\n\003id1\030\001 "
  "\001(\r\022\013\n\003id2\030\002 \001(\r\"$\n\010GameOver\022\013\n\003id1\030\001 \001("
  "\r\022\013\n\003id2\030\002 \001(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_server_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_server_2eproto = {
    false, false, 182, descriptor_table_protodef_server_2eproto,
    "server.proto",
    &descriptor_table_server_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_server_2eproto::offsets,
    file_level_metadata_server_2eproto, file_level_enum_descriptors_server_2eproto,
    file_level_service_descriptors_server_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_server_2eproto_getter() {
  return &descriptor_table_server_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_server_2eproto(&descriptor_table_server_2eproto);
namespace serverproto {

// ===================================================================

class ConnectServer::_Internal {
 public:
};

ConnectServer::ConnectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serverproto.ConnectServer)
}
ConnectServer::ConnectServer(const ConnectServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servername().empty()) {
    _this->_impl_.servername_.Set(from._internal_servername(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:serverproto.ConnectServer)
}

inline void ConnectServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectServer::~ConnectServer() {
  // @@protoc_insertion_point(destructor:serverproto.ConnectServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servername_.Destroy();
}

void ConnectServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectServer::Clear() {
// @@protoc_insertion_point(message_clear_start:serverproto.ConnectServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servername_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string servername = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_servername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serverproto.ConnectServer.servername"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serverproto.ConnectServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string servername = 1;
  if (!this->_internal_servername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serverproto.ConnectServer.servername");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverproto.ConnectServer)
  return target;
}

size_t ConnectServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverproto.ConnectServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string servername = 1;
  if (!this->_internal_servername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectServer::GetClassData() const { return &_class_data_; }


void ConnectServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectServer*>(&to_msg);
  auto& from = static_cast<const ConnectServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serverproto.ConnectServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servername().empty()) {
    _this->_internal_set_servername(from._internal_servername());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectServer::CopyFrom(const ConnectServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverproto.ConnectServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectServer::IsInitialized() const {
  return true;
}

void ConnectServer::InternalSwap(ConnectServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servername_, lhs_arena,
      &other->_impl_.servername_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[0]);
}

// ===================================================================

class RConnectServer::_Internal {
 public:
};

RConnectServer::RConnectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serverproto.RConnectServer)
}
RConnectServer::RConnectServer(const RConnectServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RConnectServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.read_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.read_ = from._impl_.read_;
  // @@protoc_insertion_point(copy_constructor:serverproto.RConnectServer)
}

inline void RConnectServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.read_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RConnectServer::~RConnectServer() {
  // @@protoc_insertion_point(destructor:serverproto.RConnectServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RConnectServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RConnectServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RConnectServer::Clear() {
// @@protoc_insertion_point(message_clear_start:serverproto.RConnectServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.read_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RConnectServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool read = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RConnectServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serverproto.RConnectServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool read = 1;
  if (this->_internal_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_read(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverproto.RConnectServer)
  return target;
}

size_t RConnectServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverproto.RConnectServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool read = 1;
  if (this->_internal_read() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RConnectServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RConnectServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RConnectServer::GetClassData() const { return &_class_data_; }


void RConnectServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RConnectServer*>(&to_msg);
  auto& from = static_cast<const RConnectServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serverproto.RConnectServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_read() != 0) {
    _this->_internal_set_read(from._internal_read());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RConnectServer::CopyFrom(const RConnectServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverproto.RConnectServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RConnectServer::IsInitialized() const {
  return true;
}

void RConnectServer::InternalSwap(RConnectServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.read_, other->_impl_.read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RConnectServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[1]);
}

// ===================================================================

class CreateRoom::_Internal {
 public:
};

CreateRoom::CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serverproto.CreateRoom)
}
CreateRoom::CreateRoom(const CreateRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id1_){}
    , decltype(_impl_.id2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id1_, &from._impl_.id1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id2_) -
    reinterpret_cast<char*>(&_impl_.id1_)) + sizeof(_impl_.id2_));
  // @@protoc_insertion_point(copy_constructor:serverproto.CreateRoom)
}

inline void CreateRoom::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id1_){0u}
    , decltype(_impl_.id2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateRoom::~CreateRoom() {
  // @@protoc_insertion_point(destructor:serverproto.CreateRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateRoom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:serverproto.CreateRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id2_) -
      reinterpret_cast<char*>(&_impl_.id1_)) + sizeof(_impl_.id2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serverproto.CreateRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id1 = 1;
  if (this->_internal_id1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id1(), target);
  }

  // uint32 id2 = 2;
  if (this->_internal_id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverproto.CreateRoom)
  return target;
}

size_t CreateRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverproto.CreateRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id1 = 1;
  if (this->_internal_id1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id1());
  }

  // uint32 id2 = 2;
  if (this->_internal_id2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoom::GetClassData() const { return &_class_data_; }


void CreateRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoom*>(&to_msg);
  auto& from = static_cast<const CreateRoom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serverproto.CreateRoom)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id1() != 0) {
    _this->_internal_set_id1(from._internal_id1());
  }
  if (from._internal_id2() != 0) {
    _this->_internal_set_id2(from._internal_id2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoom::CopyFrom(const CreateRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverproto.CreateRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoom::IsInitialized() const {
  return true;
}

void CreateRoom::InternalSwap(CreateRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoom, _impl_.id2_)
      + sizeof(CreateRoom::_impl_.id2_)
      - PROTOBUF_FIELD_OFFSET(CreateRoom, _impl_.id1_)>(
          reinterpret_cast<char*>(&_impl_.id1_),
          reinterpret_cast<char*>(&other->_impl_.id1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[2]);
}

// ===================================================================

class GameOver::_Internal {
 public:
};

GameOver::GameOver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serverproto.GameOver)
}
GameOver::GameOver(const GameOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameOver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id1_){}
    , decltype(_impl_.id2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id1_, &from._impl_.id1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id2_) -
    reinterpret_cast<char*>(&_impl_.id1_)) + sizeof(_impl_.id2_));
  // @@protoc_insertion_point(copy_constructor:serverproto.GameOver)
}

inline void GameOver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id1_){0u}
    , decltype(_impl_.id2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameOver::~GameOver() {
  // @@protoc_insertion_point(destructor:serverproto.GameOver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameOver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:serverproto.GameOver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id2_) -
      reinterpret_cast<char*>(&_impl_.id1_)) + sizeof(_impl_.id2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameOver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameOver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serverproto.GameOver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id1 = 1;
  if (this->_internal_id1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id1(), target);
  }

  // uint32 id2 = 2;
  if (this->_internal_id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serverproto.GameOver)
  return target;
}

size_t GameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serverproto.GameOver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id1 = 1;
  if (this->_internal_id1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id1());
  }

  // uint32 id2 = 2;
  if (this->_internal_id2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameOver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameOver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameOver::GetClassData() const { return &_class_data_; }


void GameOver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameOver*>(&to_msg);
  auto& from = static_cast<const GameOver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serverproto.GameOver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id1() != 0) {
    _this->_internal_set_id1(from._internal_id1());
  }
  if (from._internal_id2() != 0) {
    _this->_internal_set_id2(from._internal_id2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameOver::CopyFrom(const GameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serverproto.GameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOver::IsInitialized() const {
  return true;
}

void GameOver::InternalSwap(GameOver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameOver, _impl_.id2_)
      + sizeof(GameOver::_impl_.id2_)
      - PROTOBUF_FIELD_OFFSET(GameOver, _impl_.id1_)>(
          reinterpret_cast<char*>(&_impl_.id1_),
          reinterpret_cast<char*>(&other->_impl_.id1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameOver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_2eproto_getter, &descriptor_table_server_2eproto_once,
      file_level_metadata_server_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serverproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::serverproto::ConnectServer*
Arena::CreateMaybeMessage< ::serverproto::ConnectServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serverproto::ConnectServer >(arena);
}
template<> PROTOBUF_NOINLINE ::serverproto::RConnectServer*
Arena::CreateMaybeMessage< ::serverproto::RConnectServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serverproto::RConnectServer >(arena);
}
template<> PROTOBUF_NOINLINE ::serverproto::CreateRoom*
Arena::CreateMaybeMessage< ::serverproto::CreateRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serverproto::CreateRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::serverproto::GameOver*
Arena::CreateMaybeMessage< ::serverproto::GameOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serverproto::GameOver >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
