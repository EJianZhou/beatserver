// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2eproto;
namespace serverproto {
class ConnectServer;
struct ConnectServerDefaultTypeInternal;
extern ConnectServerDefaultTypeInternal _ConnectServer_default_instance_;
class CreateRoom;
struct CreateRoomDefaultTypeInternal;
extern CreateRoomDefaultTypeInternal _CreateRoom_default_instance_;
class GameOver;
struct GameOverDefaultTypeInternal;
extern GameOverDefaultTypeInternal _GameOver_default_instance_;
class RConnectServer;
struct RConnectServerDefaultTypeInternal;
extern RConnectServerDefaultTypeInternal _RConnectServer_default_instance_;
}  // namespace serverproto
PROTOBUF_NAMESPACE_OPEN
template<> ::serverproto::ConnectServer* Arena::CreateMaybeMessage<::serverproto::ConnectServer>(Arena*);
template<> ::serverproto::CreateRoom* Arena::CreateMaybeMessage<::serverproto::CreateRoom>(Arena*);
template<> ::serverproto::GameOver* Arena::CreateMaybeMessage<::serverproto::GameOver>(Arena*);
template<> ::serverproto::RConnectServer* Arena::CreateMaybeMessage<::serverproto::RConnectServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serverproto {

// ===================================================================

class ConnectServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serverproto.ConnectServer) */ {
 public:
  inline ConnectServer() : ConnectServer(nullptr) {}
  ~ConnectServer() override;
  explicit PROTOBUF_CONSTEXPR ConnectServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectServer(const ConnectServer& from);
  ConnectServer(ConnectServer&& from) noexcept
    : ConnectServer() {
    *this = ::std::move(from);
  }

  inline ConnectServer& operator=(const ConnectServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectServer& operator=(ConnectServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectServer* internal_default_instance() {
    return reinterpret_cast<const ConnectServer*>(
               &_ConnectServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectServer& a, ConnectServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectServer& from) {
    ConnectServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serverproto.ConnectServer";
  }
  protected:
  explicit ConnectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServernameFieldNumber = 1,
  };
  // string servername = 1;
  void clear_servername();
  const std::string& servername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servername();
  PROTOBUF_NODISCARD std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // @@protoc_insertion_point(class_scope:serverproto.ConnectServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class RConnectServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serverproto.RConnectServer) */ {
 public:
  inline RConnectServer() : RConnectServer(nullptr) {}
  ~RConnectServer() override;
  explicit PROTOBUF_CONSTEXPR RConnectServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RConnectServer(const RConnectServer& from);
  RConnectServer(RConnectServer&& from) noexcept
    : RConnectServer() {
    *this = ::std::move(from);
  }

  inline RConnectServer& operator=(const RConnectServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RConnectServer& operator=(RConnectServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RConnectServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const RConnectServer* internal_default_instance() {
    return reinterpret_cast<const RConnectServer*>(
               &_RConnectServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RConnectServer& a, RConnectServer& b) {
    a.Swap(&b);
  }
  inline void Swap(RConnectServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RConnectServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RConnectServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RConnectServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RConnectServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RConnectServer& from) {
    RConnectServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RConnectServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serverproto.RConnectServer";
  }
  protected:
  explicit RConnectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadFieldNumber = 1,
  };
  // bool read = 1;
  void clear_read();
  bool read() const;
  void set_read(bool value);
  private:
  bool _internal_read() const;
  void _internal_set_read(bool value);
  public:

  // @@protoc_insertion_point(class_scope:serverproto.RConnectServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool read_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class CreateRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serverproto.CreateRoom) */ {
 public:
  inline CreateRoom() : CreateRoom(nullptr) {}
  ~CreateRoom() override;
  explicit PROTOBUF_CONSTEXPR CreateRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoom(const CreateRoom& from);
  CreateRoom(CreateRoom&& from) noexcept
    : CreateRoom() {
    *this = ::std::move(from);
  }

  inline CreateRoom& operator=(const CreateRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoom& operator=(CreateRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoom* internal_default_instance() {
    return reinterpret_cast<const CreateRoom*>(
               &_CreateRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateRoom& a, CreateRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRoom& from) {
    CreateRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serverproto.CreateRoom";
  }
  protected:
  explicit CreateRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kId1FieldNumber = 1,
    kId2FieldNumber = 2,
  };
  // uint32 id1 = 1;
  void clear_id1();
  uint32_t id1() const;
  void set_id1(uint32_t value);
  private:
  uint32_t _internal_id1() const;
  void _internal_set_id1(uint32_t value);
  public:

  // uint32 id2 = 2;
  void clear_id2();
  uint32_t id2() const;
  void set_id2(uint32_t value);
  private:
  uint32_t _internal_id2() const;
  void _internal_set_id2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serverproto.CreateRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id1_;
    uint32_t id2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2eproto;
};
// -------------------------------------------------------------------

class GameOver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serverproto.GameOver) */ {
 public:
  inline GameOver() : GameOver(nullptr) {}
  ~GameOver() override;
  explicit PROTOBUF_CONSTEXPR GameOver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameOver(const GameOver& from);
  GameOver(GameOver&& from) noexcept
    : GameOver() {
    *this = ::std::move(from);
  }

  inline GameOver& operator=(const GameOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameOver& operator=(GameOver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameOver& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameOver* internal_default_instance() {
    return reinterpret_cast<const GameOver*>(
               &_GameOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameOver& a, GameOver& b) {
    a.Swap(&b);
  }
  inline void Swap(GameOver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameOver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameOver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameOver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameOver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameOver& from) {
    GameOver::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameOver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serverproto.GameOver";
  }
  protected:
  explicit GameOver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kId1FieldNumber = 1,
    kId2FieldNumber = 2,
  };
  // uint32 id1 = 1;
  void clear_id1();
  uint32_t id1() const;
  void set_id1(uint32_t value);
  private:
  uint32_t _internal_id1() const;
  void _internal_set_id1(uint32_t value);
  public:

  // uint32 id2 = 2;
  void clear_id2();
  uint32_t id2() const;
  void set_id2(uint32_t value);
  private:
  uint32_t _internal_id2() const;
  void _internal_set_id2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serverproto.GameOver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id1_;
    uint32_t id2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectServer

// string servername = 1;
inline void ConnectServer::clear_servername() {
  _impl_.servername_.ClearToEmpty();
}
inline const std::string& ConnectServer::servername() const {
  // @@protoc_insertion_point(field_get:serverproto.ConnectServer.servername)
  return _internal_servername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectServer::set_servername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.servername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serverproto.ConnectServer.servername)
}
inline std::string* ConnectServer::mutable_servername() {
  std::string* _s = _internal_mutable_servername();
  // @@protoc_insertion_point(field_mutable:serverproto.ConnectServer.servername)
  return _s;
}
inline const std::string& ConnectServer::_internal_servername() const {
  return _impl_.servername_.Get();
}
inline void ConnectServer::_internal_set_servername(const std::string& value) {
  
  _impl_.servername_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectServer::_internal_mutable_servername() {
  
  return _impl_.servername_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectServer::release_servername() {
  // @@protoc_insertion_point(field_release:serverproto.ConnectServer.servername)
  return _impl_.servername_.Release();
}
inline void ConnectServer::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  _impl_.servername_.SetAllocated(servername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servername_.IsDefault()) {
    _impl_.servername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serverproto.ConnectServer.servername)
}

// -------------------------------------------------------------------

// RConnectServer

// bool read = 1;
inline void RConnectServer::clear_read() {
  _impl_.read_ = false;
}
inline bool RConnectServer::_internal_read() const {
  return _impl_.read_;
}
inline bool RConnectServer::read() const {
  // @@protoc_insertion_point(field_get:serverproto.RConnectServer.read)
  return _internal_read();
}
inline void RConnectServer::_internal_set_read(bool value) {
  
  _impl_.read_ = value;
}
inline void RConnectServer::set_read(bool value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:serverproto.RConnectServer.read)
}

// -------------------------------------------------------------------

// CreateRoom

// uint32 id1 = 1;
inline void CreateRoom::clear_id1() {
  _impl_.id1_ = 0u;
}
inline uint32_t CreateRoom::_internal_id1() const {
  return _impl_.id1_;
}
inline uint32_t CreateRoom::id1() const {
  // @@protoc_insertion_point(field_get:serverproto.CreateRoom.id1)
  return _internal_id1();
}
inline void CreateRoom::_internal_set_id1(uint32_t value) {
  
  _impl_.id1_ = value;
}
inline void CreateRoom::set_id1(uint32_t value) {
  _internal_set_id1(value);
  // @@protoc_insertion_point(field_set:serverproto.CreateRoom.id1)
}

// uint32 id2 = 2;
inline void CreateRoom::clear_id2() {
  _impl_.id2_ = 0u;
}
inline uint32_t CreateRoom::_internal_id2() const {
  return _impl_.id2_;
}
inline uint32_t CreateRoom::id2() const {
  // @@protoc_insertion_point(field_get:serverproto.CreateRoom.id2)
  return _internal_id2();
}
inline void CreateRoom::_internal_set_id2(uint32_t value) {
  
  _impl_.id2_ = value;
}
inline void CreateRoom::set_id2(uint32_t value) {
  _internal_set_id2(value);
  // @@protoc_insertion_point(field_set:serverproto.CreateRoom.id2)
}

// -------------------------------------------------------------------

// GameOver

// uint32 id1 = 1;
inline void GameOver::clear_id1() {
  _impl_.id1_ = 0u;
}
inline uint32_t GameOver::_internal_id1() const {
  return _impl_.id1_;
}
inline uint32_t GameOver::id1() const {
  // @@protoc_insertion_point(field_get:serverproto.GameOver.id1)
  return _internal_id1();
}
inline void GameOver::_internal_set_id1(uint32_t value) {
  
  _impl_.id1_ = value;
}
inline void GameOver::set_id1(uint32_t value) {
  _internal_set_id1(value);
  // @@protoc_insertion_point(field_set:serverproto.GameOver.id1)
}

// uint32 id2 = 2;
inline void GameOver::clear_id2() {
  _impl_.id2_ = 0u;
}
inline uint32_t GameOver::_internal_id2() const {
  return _impl_.id2_;
}
inline uint32_t GameOver::id2() const {
  // @@protoc_insertion_point(field_get:serverproto.GameOver.id2)
  return _internal_id2();
}
inline void GameOver::_internal_set_id2(uint32_t value) {
  
  _impl_.id2_ = value;
}
inline void GameOver::set_id2(uint32_t value) {
  _internal_set_id2(value);
  // @@protoc_insertion_point(field_set:serverproto.GameOver.id2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serverproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2eproto
